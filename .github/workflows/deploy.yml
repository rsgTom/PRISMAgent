name: Deploy

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      version: ${{ steps.tag.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract version
        id: tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=latest
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/Dockerfile
          target: api
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/api:${{ steps.tag.outputs.version }}
            ${{ steps.tag.outputs.version == 'latest' && format('ghcr.io/{0}/api:latest', github.repository) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Streamlit image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/Dockerfile
          target: streamlit
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/streamlit:${{ steps.tag.outputs.version }}
            ${{ steps.tag.outputs.version == 'latest' && format('ghcr.io/{0}/streamlit:latest', github.repository) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging environment
        run: |
          echo "Deploying version ${{ needs.build-and-push.outputs.version }} to staging environment"
          # Replace with actual deployment commands for your staging environment
          # e.g., kubectl, Ansible, Terraform, or custom deployment scripts
          # For now, we'll just echo a message
          echo "Deployed to staging environment successfully!"

  deploy-production:
    name: Deploy to Production
    needs: [build-and-push, deploy-staging]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://example.com  # Replace with actual production URL
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to production environment
        run: |
          echo "Deploying version ${{ needs.build-and-push.outputs.version }} to production environment"
          # Replace with actual deployment commands for your production environment
          # e.g., kubectl, Ansible, Terraform, or custom deployment scripts
          # For now, we'll just echo a message
          echo "Deployed to production environment successfully!"
