"""\nPRISMAgent.tools.spawn\n---------------------\n\nThis module provides tools for spawning new agents.\n"""\n\nfrom __future__ import annotations\n\nfrom typing import Callable, Dict, List, Optional, Union, Any\n\nfrom agents import Agent\nfrom .factory import tool_factory\nfrom PRISMAgent.engine.factory import agent_factory\n\n\n@tool_factory\ndef spawn_agent(\n    name: str,\n    instructions: str,\n    tools: Optional[List[Union[str, Callable]]] = None,\n    handoffs: Optional[List[str]] = None,\n) -> Dict[str, Any]:\n    """\n    Create a new agent with the specified parameters.\n    \n    This tool allows one agent to create another agent with different\n    capabilities or specialties.\n    \n    Args:\n        name: Unique identifier for the new agent.\n        instructions: System prompt/instructions for the agent.\n        tools: Optional list of tool names or callable tool functions to provide to the agent.\n        handoffs: Optional list of agent names that this agent can delegate tasks to.\n    \n    Returns:\n        A dictionary with details about the created agent.\n    """\n    # Import here to avoid circular imports\n    from PRISMAgent.tools import list_available_tools\n    \n    # Validate and process tool specifications\n    available_tools = list_available_tools()\n    actual_tools: List[Callable] = []\n    \n    if tools:\n        for tool_spec in tools:\n            # If it's already a callable, use it directly\n            if callable(tool_spec):\n                actual_tools.append(tool_spec)\n                continue\n                \n            # If it's a string, try to find the corresponding tool\n            if isinstance(tool_spec, str):\n                if tool_spec not in available_tools:\n                    raise ValueError(f"Invalid tool name: {tool_spec}")\n                    \n                # Import the actual tool dynamically\n                from importlib import import_module\n                \n                try:\n                    # Assume tools are in modules with the same name\n                    module = import_module(f"PRISMAgent.tools.{tool_spec}")\n                    if hasattr(module, tool_spec):\n                        tool_func = getattr(module, tool_spec)\n                        actual_tools.append(tool_func)\n                except ImportError:\n                    raise ValueError(f"Could not load tool module for: {tool_spec}")\n    \n    # Process handoff specifications\n    actual_handoffs: List[Agent] = []\n    if handoffs:\n        # Import here to avoid circular imports\n        from PRISMAgent.storage import registry_factory\n        registry = registry_factory()\n        \n        for agent_name in handoffs:\n            agent = registry.get_agent(agent_name)\n            if not agent:\n                raise ValueError(f"Agent not found for handoff: {agent_name}")\n            actual_handoffs.append(agent)\n    \n    # Create the agent via the factory function\n    agent = agent_factory(\n        name=name,\n        instructions=instructions,\n        tools=actual_tools if actual_tools else None,\n        handoffs=actual_handoffs if actual_handoffs else None,\n    )\n    \n    # Return information about the created agent\n    return {\n        "id": agent.name,\n        "status": "created",\n        "tools": [\n            getattr(t, "__prism_name__", t.__name__) \n            for t in actual_tools\n        ] if actual_tools else [],\n        "handoffs": [a.name for a in actual_handoffs] if actual_handoffs else [],\n    }