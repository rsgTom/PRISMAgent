"""\nPRISMAgent Streamlit UI\n-----------------------\n\nA simple web interface for interacting with PRISMAgent.\n"""\n\nimport os\nimport streamlit as st\nfrom typing import Dict, Any, Optional, List\n\nfrom PRISMAgent.engine.factory import agent_factory\nfrom PRISMAgent.engine.runner import runner_factory\nfrom PRISMAgent.tools.spawn import spawn_agent\nfrom PRISMAgent.config import OPENAI_API_KEY\n\n# Load custom CSS\ndef load_css():\n    css_file = os.path.join(os.path.dirname(__file__), "style.css")\n    if os.path.exists(css_file):\n        with open(css_file) as f:\n            st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)\n\n# Load CSS\nload_css()\n\n# Page config\nst.set_page_config(\n    page_title="PRISMAgent",\n    page_icon="üõ†",\n    layout="wide",\n)\n\n# Title and description\nst.title("PRISMAgent üõ†")\nst.markdown(\n    """\n    *A modular, multi-agent framework with plug-and-play storage, tools, and UIs.*\n    \n    Use this interface to interact with agents and spawn specialized agents for specific tasks.\n    """\n)\n\n# Check for API key\nif not OPENAI_API_KEY:\n    st.error("‚ö†Ô∏è OpenAI API key not found. Please set the OPENAI_API_KEY environment variable.")\n    st.stop()\n\n# Sidebar for agent configuration\nwith st.sidebar:\n    st.header("Agent Configuration")\n    \n    # Agent type selection\n    agent_type = st.selectbox(\n        "Agent Type",\n        ["assistant", "coder", "researcher"],\n        help="Select the type of agent to interact with",\n    )\n    \n    # Model selection\n    model = st.selectbox(\n        "Model",\n        ["gpt-o3-mini", "gpt-4.1"],\n        help="Select the model to use",\n    )\n    \n    # Task complexity\n    complexity = st.selectbox(\n        "Task Complexity",\n        ["auto", "basic", "advanced"],\n        help="Select the complexity level for the task",\n    )\n    \n    # Specify available tools\n    available_tools = st.multiselect(\n        "Available Tools",\n        ["spawn_agent", "web_search", "code_interpreter"],\n        default=["spawn_agent"],\n        help="Select tools this agent can use"\n    )\n    \n    # System prompt\n    system_prompt = st.text_area(\n        "System Prompt",\n        value="You are a helpful AI assistant.",\n        help="Custom instructions for the agent",\n    )\n\n# Main chat interface\nst.header("Chat Interface")\n\n# Initialize session state for chat history\nif "messages" not in st.session_state:\n    st.session_state.messages = []\n\n# Display chat history\nfor message in st.session_state.messages:\n    with st.chat_message(message["role"]):\n        st.markdown(message["content"])\n\n# Chat input\nif prompt := st.chat_input("What would you like help with?"):\n    # Add user message to chat history\n    st.session_state.messages.append({"role": "user", "content": prompt})\n    with st.chat_message("user"):\n        st.markdown(prompt)\n    \n    # Get agent response\n    with st.chat_message("assistant"):\n        with st.spinner("Thinking..."):\n            # Create tool list based on selections\n            tool_list: List[Any] = []\n            if "spawn_agent" in available_tools:\n                tool_list.append(spawn_agent)\n            \n            # Additional tools can be added here as they're implemented\n            # if "web_search" in available_tools:\n            #     tool_list.append(web_search)\n            # if "code_interpreter" in available_tools:\n            #     tool_list.append(code_interpreter)\n            \n            # Create or get agent\n            agent_name = f"{agent_type}_agent"\n            agent = agent_factory(\n                name=agent_name,\n                instructions=system_prompt,\n                tools=tool_list if tool_list else None,\n            )\n            \n            # Create runner\n            runner = runner_factory(stream=False)\n            \n            # Get response\n            response = runner.run(agent, prompt)\n            \n            # Add assistant response to chat history\n            st.session_state.messages.append({"role": "assistant", "content": response})\n            st.markdown(response)\n\n# Footer\nst.markdown("---")\nst.markdown(\n    """\n    <div style='text-align: center'>\n        <p>Made with ‚ù§Ô∏è using PRISMAgent</p>\n    </div>\n    """,\n    unsafe_allow_html=True,\n) 